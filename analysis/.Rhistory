install.packages("acs")
version
library(ggplot2)
library(glmnet) #for lasso regression
library(caret) #for class imbalance problems and other ML stuff
library(gmodels) #for crosstables
library(mice)
library(corrplot)
library(e1071);
library(lattice)
library(censusapi)
library(devtools)
install.packages("ggplot2")
library(ggplot2)
library(glmnet)
install.packages("glmnet")
install.packages("caret")
install.packages("gmodels")
install.packages("mice")
install.packages("corrplot")
install.packages("e1071")
install.packages("lattice")
install.packages("lattice")
install.packages("censusapi")
install.packages("devtools")
library(ggplot2)
library(glmnet) #for lasso regression
library(caret) #for class imbalance problems and other ML stuff
library(gmodels) #for crosstables
library(mice)
library(corrplot)
library(e1071);
library(lattice)
library(censusapi)
library(devtools)
mycensuskey<-"2a2edb89f72cea52c65087baa39a7eee9b0fc42f"
availableapis <-listCensusApis()
View(availableapis)
myvintage<-2015
availablevars<-listCensusMetadata(name="acs1", type = "variables")
View(availablevars)
availablevars<-listCensusMetadata(name="acs1", vintage = 2015, type = "variables")
View(availablevars)
getCensus()
?getCensus
zpb_data<-getCensus(name="zbp", vintage = 2015, key = mycensuskey, vars = c("PAYANN"), region = "ZIPCODE")
View(zpb_data)
View(zpb_data)
zpb_data<-getCensus(name="zbp", vintage = 2015, key = mycensuskey, vars = c("PAYANN", "PAYANN_N_F", "YEAR", "EMP"), region = "ZIPCODE")
View(zpb_data)
View(zpb_data)
zpb_data<-getCensus(name="zbp", vintage = 2015, key = mycensuskey, vars = c("PAYANN", "PAYANN_N_F", "YEAR", "EMP", "GEO_TTL"), region = "ZIPCODE")
View(zpb_data)
View(zpb_data)
install.packages("acs")
library(acs)
?`acs-package`
?acs.fetch
zip_geo = geo.make(zip.code = "*")
race.data = acs.fetch(geography=zip_geo, table.number = "B03002", col.names = "pretty", endyear = 2013, span = 5)
race.data = acs.fetch(geography=zip_geo, table.number = "B03002", col.names = "pretty", endyear = 2013, span = 5, key=mycensuskey)
install.packages("tigris")
library(tigris)
library(acs)
install.packages("leaflet")
api.key.install(key=mycensuskey)
# create a geographic set to grab tabular data (acs)
zip_geo = geo.make(zip.code = "*")
geo<-geo.make(state=c("NY"),
county=c(5, 47, 61, 81, 85), tract="*")
# grab the spatial data (tigris)
counties <- c(5, 47, 61, 81, 85)
tracts <- tracts(state = 'NY', county = c(5, 47, 61, 81, 85), cb=TRUE)
income<-acs.fetch(endyear = 2015, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
names(attributes(income))
attr(income, "acs.colnames")
# convert to a data.frame for merging
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income: Total:",
"Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
income@estimate
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:",
"B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or mo")],
stringsAsFactors = FALSE)
attr(income, "acs.colnames",1)
income@estimate[1]
colnames(income@estimate[1])
colnames(income@estimate[2])
a<-income@estimate
View(a)
View(a)
b<-colnames(a[1])
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c(1,17)],
stringsAsFactors = FALSE)
View(income_df)
View(income_df)
income_df <- select(income_df, 1:3)
rownames(income_df)<-1:nrow(income_df)
names(income_df)<-c("GEOID", "total", "over_200")
income_df$percent <- 100*(income_df$over_200/income_df$total)
income_merged<- geo_join(tracts, income_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
income_merged <- income_merged[income_merged$ALAND>0,]
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$percent
)
map3<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = income_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map3
library(leaflet)
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$percent
)
map3<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = income_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map3
View(income_df)
View(income_df)
seq(1,100,1)
geo<-geo.make(state=c("NC"),
county=seq(1,100,1), tract="*")
counties <- seq(1,100,1)
tracts <- tracts(state = 'NC', county = counties, cb=TRUE)
warnings()
install.ImageMagick()
install.packages("installr")
install.packages("installr")
Sys.which('ffmpeg')
install.ffmpeg()
Sys.which('imageMagick')
install.packages("magick")
sqrt(180)
180*400
/400
.75*150
2014*.25
2104*.25
sd(-5,0)
?sd
sd(c(-5,0))
sd(c(-5,0,-5,-5,-5))
(.9*545000)-(.9*541000)
(.9*549000)-(.9*541000)
8/541
(.9*549000)-(.9*545000)
285/326
install.packages("RSQLite")
setwd("~/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
decisionData <- read.table("data_for_R_glm.csv", header =TRUE)
setwd("~/Users/amywinecoff/Documents/sport_body_project/sport_body_project/analysis")
library(lme4)
#library(DBI)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
library(lme4)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
decisionData <- read.table("data_for_R_glm.csv", header =TRUE)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/analysis")
library(lme4)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
decisionData <- read.table("data_for_R_glm.csv", header =TRUE)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/analysis")
decisionData <- read.table("data_for_R_glm.csv", header =TRUE)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
decisionData <- read.table("data_for_R_glm.csv", header =TRUE)
decisionData <- read.csv("data_for_R_glm.csv", header =TRUE)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/analysis")
View(decisionData)
View(decisionData)
?subset
decisionWomen <-subset(decisionData, gender="Female")
decisionWomen <-subset(decisionData, gender=="Female")
View(decisionData)
View(decisionData)
levels(decisionDataWomen$sport)
library(lme4)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/data")
decisionData <- read.csv("data_for_R_glm.csv", header =TRUE)
setwd("/Users/amywinecoff/Documents/sport_body_project/sport_body_project/analysis")
decisionDataWomen <-subset(decisionData, gender=="Female")
decisiondDataMen<-subset(decisionData, gender == "Male")
levels(decisionDataWomen$sport)
View(decisionDataWomen)
View(decisionDataWomen)
data.table?
?
;wkajf;asldkf
w = table(decisionDataWomen$sport)
w
droplevels(decisionDataWomen$sport)
decisionDataWomen$sport <-droplevels(decisionDataWomen$sport)
levels(decisionDataWomen$sport)
decisionDataWomen<-droplevels.data.frame(decisionDataWomen)
nums <- unlist(lapply(decisionDataWOmen, is.numeric))
nums <- unlist(lapply(decisionDataWomen, is.numeric))
nums
nums[nums==True]
nums[nums==TRUE]
library("dplyr")
select_if(decisionDataWomen, is.numeric)
x <-select_if(decisionDataWomen, is.numeric)
x
x.columns
x.names
names(x)
names(select_if(decisionDataWomen, is.numeric))
library(ggplot2)
library(lattice)
num_vars <- names(select_if(decisionDataWomen, is.numeric))
ggpairs(decisionDataWomen[, c(num_vars)])
library(lme4)
library(ggplot2)
library(lattice)
require(GGally)
install.packages("GGally")
ggpairs(decisionDataWomen[, c(num_vars)])
library(GGally)
ggpairs(decisionDataWomen[, c(num_vars)])
ggpairs(decisionDataWomen[, c("size", "emaciation", "detail", "education", "age", "BMI")])
ggpairs(decisionDataWomen[, c("size", "emaciation", "detail", "education", "age", "BMI")])
ggpairs(decisionDataWomen[, c("education", "age", "BMI")])
tmp <- melt(decisionDataWomen[, c("chose_test", "education", "age", "BMI")],
id.vars="remission")
ggplot(tmp, aes(factor(chose_test), y = value, fill=factor(chose_test))) +
geom_boxplot() +
facet_wrap(~variable, scales="free_y")
require(reshape2)
tmp <- melt(decisionDataWomen[, c("chose_test", "education", "age", "BMI")],
id.vars="remission")
tmp <- melt(decisionDataWomen[, c("chose_test", "education", "age", "BMI")],
id.vars="chose_test")
ggplot(tmp, aes(factor(chose_test), y = value, fill=factor(chose_test))) +
geom_boxplot() +
facet_wrap(~variable, scales="free_y")
m <- glmer(chose_test ~ sport + emaciation + detail + size + sport:emaciation + sport:detail + sport:size +
(1 | subject), data = decisionDataWomen, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
names(decisionDataWomen)
m <- glmer(chose_test ~ sport + emaciation + detail + size + sport:emaciation + sport:detail + sport:size +
(1 | subj), data = decisionDataWomen, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(m)
unconditional_model <-glmer(chose_test ~ 1 + (1 | subj), data=decisionDataWomen)
unconditional_model <-glmer(chose_test ~ 1 + (1 | subj), data=decisionDataWomen, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(unconditional_model)
summary(unconditional_model)
